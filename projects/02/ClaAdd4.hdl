// Implementing a Carry look ahead 4bit adder

/**
 * Adds two 4-bit values using carry look ahead techniques
 * The most significant carry bit is ignored.
 */

CHIP ClaAdd4 {
    IN a[4], b[4], c;
    OUT out[4], carry;

    PARTS:
   ClaFullAdder(a=a[0], b=b[0], c=c, sum=out[0], gen=g0, prop=p0);
   And(a=p0, b=c, out=pAndc1);
   Or(a=pAndc1, b=g0, out=c1);

   ClaFullAdder(a=a[1], b=b[1], c=c1, sum=out[1], gen=g1, prop=p1);
   And(a=p1, b=c1, out=pAndc2);
   Or(a=pAndc2, b=g1, out=c2);

   ClaFullAdder(a=a[2], b=b[2], c=c2, sum=out[2], gen=g2, prop=p2);
   And(a=p2, b=c2, out=pAndc3);
   Or(a=pAndc3, b=g2, out=c3);

   ClaFullAdder(a=a[3], b=b[3], c=c3, sum=out[3], gen=g3, prop=p3);
   And(a=p3, b=c3, out=pAndc4);
   Or(a=pAndc4, b=g3, out=carry);
}